package com.gsta.bigdata.utils;

import java.util.HashMap;
import java.util.Map;

import com.gsta.bigdata.etl.core.source.mro.DIMObj;

/**
 * test result:
 * 'before' heap: 741208, 'after' heap: 565542880
heap delta: 564801672, {class com.gsta.bigdata.etl.core.source.mro.DIMObj} size = 56480 bytes
 * @author tianxq
 *
 */
public class ClassSizeOf  
{  
    public static void main (String [] args) throws Exception  
    {  
        // Warm up all classes/methods we will use  
        runGC ();  
        usedMemory ();  
        // Array to keep strong references to allocated objects  
        final int count = 10000;  
        Object [] objects = new Object [count];  
        
        String line = "π„÷›,854406,50,9.0,60,113.31382,23.12659,15.0,10,1800.0,15, 857255;857255;857255;482713;482934;482934;479391;479391;479391;482004;479759;479759;480144;480144;480144;481197;481197;481197;482833;480580;479994;857831;857831;857831;479245;479245;479245;482541;482541;482541;481322;481322;481322;480822;480822;481916;481916;481916;480707;480832;480561;482769;482028;482028;482768;479342;479342;479342;482580;482580;482580;479352;479352;482768;479516;479516;479516;480125;480125;480125;481853;481853;481853;480141;482766;481930;482582;482582;479258;482981;482981;482981;479237;482833;482833;482833;482833;479761;857278;857278;857278;479290;479290;479290;483075;483075;483075;480117;480117;480117;481183;481183;481183;479247;479247;479247;482939;482489;482489;481980;481980;480497;481878;481878;481878;482539;482539;482539;482174;479251;479251;479356;481456;481456;480757;480757;480640;481879;481879;481879;483309;483309;483309;483309;479352;479352;479352;482581;482581;479373;479373;479373;486690;486690;486690;480635;482554;482554;480147;480147;480147;481512;481512;481953;482581;482581;482581;480139;480139;480139;479328;479328;479328;480137;480137;480137;481449;481449;481449;481449;480626;480765;479238;479238;479238;482972;482972;482770;857255;857255;857255;479346;479346;479346;482763;858008;858008;481989;480140;480140;480606;482027;482027;857375;857375;857375;479239;479239;479239;480832;480832;480832;479239;479239;479239;479730;853234;853234;480637;480637;480637;479327;481939;479327;481855;481855;481855;479250;479250;479250;480757;480757;483133;853960;853960;480136;482551;482551;482551;482987;481849;481849;479729;479729;479729;480123;480123;480123;480143;480143;480143;482967;482769;479807;480398;480398;481939;480642;480642;480642;481902;480634;482768;480822;479748;480583;479363;479363;481940;480118;480118;480118;480118;481518;481518;482961;482961;482961;480538;480538;480538;481814;481814;481814;480583;480583;480583;479344;483085;483085;481213;481213;481213;481902;481902;482066;482596;482966;482966;481895;481895;481895;480736;480736;480736;479262;479262;479384;482027;479349;479349;857326;857326;857326;483103;482047;482047;481486;481486;481486;853234;853234;853234;479347;479347;479347;857326;857326;857326;857272;857272;857272;480122;480122;480122;483047;481183;481183;480144;479930;479930;480124;480124;480124;482616;483060;483060;479437;479437;479437;857278;857278;857278;481517;481517;481517;479234;479234;479234;480568;480568;480568;479244;479244;479244;857374;857374;857374;482583;482583;482583;479340;479340;479340;481197;481197;481197;479255;479255;480388;481381;858086;858086;481620;481620;481620;481620;481620;481620;481620;481620;858014;481857;481857;481857;481857;481857;481204;481204;481204;481204;858014;858014;479425;858012;858012;481501;479402;479402;479402;479559;479559;480139;481281;481281;480139;481828;853440;480009;481593;481593;481593;481949;481949;481008;481025;481025;481025;481156;481156;481156;481156;481156;481157;481326;481326;481326;481326;481326;481326;479518;479518;479518;479518;482711;482711;858039;481239;481239;479538;479538;479538;479538;481949;481949;857889;858037;858037;857889;857889;857889;481856;481856;481856;481856;481856;481856;479409;479409;479409;479424;857889;857889;479328;482044;482044;482044;482044;482044;479409;482044;479945;479945;857169;857169;857169;857169;858015;479570;479570;479570;479424;482711;482711;481157;481157;857958;853440;481620;481239;481950;481327;481498;856688;485794;null;857948;485794;null;856395;856944;null;483382;null;null;856690;483331;483331;856396;485699;null;856394;null;null, 48;49;50;0;1;2;4;3;5;0;1;2;0;2;1;96;97;98;6;49;2;48;49;50;48;49;50;0;1;2;0;1;2;97;98;0;1;2;52;0;1;4;48;1;4;0;1;2;0;1;2;51;52;5;50;1;52;0;1;2;48;49;50;0;2;5;48;49;2;0;1;2;0;1;2;0;3;2;3;4;5;0;1;2;0;1;2;1;0;2;51;52;53;96;97;98;0;49;50;48;4;4;48;1;2;0;1;50;0;1;2;96;2;1;0;1;5;0;1;2;2;1;0;3;1;2;0;3;4;0;1;2;0;1;2;0;0;1;0;1;2;0;1;4;49;50;48;0;1;2;49;1;2;2;1;0;0;1;3;2;0;0;0;1;2;0;1;0;51;52;53;0;1;2;1;1;2;0;1;2;49;1;2;0;1;2;48;49;2;49;2;3;6;7;54;0;1;2;0;1;2;0;49;2;48;49;50;0;1;2;96;97;2;0;1;2;48;49;50;0;1;2;0;1;2;0;1;2;2;1;0;0;3;2;0;1;0;0;1;2;48;1;6;96;1;4;48;1;0;0;1;2;3;1;2;0;1;2;48;1;2;48;49;50;48;50;49;3;1;2;48;4;5;5;4;2;3;0;1;0;1;2;48;49;50;0;1;2;48;1;2;48;1;2;0;1;2;48;49;50;3;5;4;0;1;2;3;4;5;0;1;2;0;1;2;0;1;2;49;1;2;0;1;2;0;1;2;0;1;2;50;48;49;0;1;2;0;1;2;48;49;50;50;51;52;0;1;2;0;1;2;0;1;2;0;1;2;0;1;2;50;0;1;53;52;55;54;49;48;51;50;0;51;52;50;48;49;0;1;2;3;1;2;5;1;2;48;0;1;2;2;3;50;51;52;4;0;1;5;51;50;48;2;3;48;0;1;2;0;1;2;3;4;0;51;52;53;48;49;50;1;0;2;3;0;48;5;49;50;51;50;48;49;4;5;0;3;4;3;4;5;51;52;53;48;49;50;0;1;2;3;1;2;48;0;1;2;3;4;3;5;48;49;0;1;2;3;1;1;0;2;1;1;2;1;2;3;4;0;51;0;1;2;0;0;null;1;1;null;0;0;null;0;null;null;0;1;2;0;0;null;0;null;null";
        String[] datas = line.split(",",-1);
        Map<String, DIMObj> dimensions = new HashMap<String, DIMObj>();
        
        long heap1 = 0;  
        // Allocate count+1 objects, discard the first one  
        for (int i = -1; i < count; ++ i)  
        {  
            Object object = null;  
              
            // Instantiate your data here and assign it to object  
              
            //object = new Object ();  
            //object = new Integer (i);  
            //object = new Long (i);  
            //object = new String ();  
            //object = new byte [128][1]  
            object = new DIMObj(datas);
            DIMObj dimObj = (DIMObj)object;
            dimensions.put(dimObj.getKey(), dimObj);
              
            if (i >= 0)  
                objects [i] = object;  
            else  
            {  
                object = null; // Discard the warm up object  
                runGC ();  
                heap1 = usedMemory (); // Take a before heap snapshot  
            }  
        }  
        runGC ();  
        long heap2 = usedMemory (); // Take an after heap snapshot:  
          
        final int size = Math.round (((float)(heap2 - heap1))/count);  
        System.out.println ("'before' heap: " + heap1 +  
                            ", 'after' heap: " + heap2);  
        System.out.println ("heap delta: " + (heap2 - heap1) +  
            ", {" + objects [0].getClass () + "} size = " + size + " bytes");  
        for (int i = 0; i < count; ++ i) objects [i] = null;  
        objects = null;  
    }  
    private static void runGC () throws Exception  
    {  
        // It helps to call Runtime.gc()  
        // using several method calls:  
        for (int r = 0; r < 4; ++ r) _runGC ();  
    }  
    @SuppressWarnings("static-access")
	private static void _runGC () throws Exception  
    {  
        long usedMem1 = usedMemory (), usedMem2 = Long.MAX_VALUE;  
        for (int i = 0; (usedMem1 < usedMem2) && (i < 500); ++ i)  
        {  
            s_runtime.runFinalization ();  
            s_runtime.gc ();  
            Thread.currentThread ().yield ();  
              
            usedMem2 = usedMem1;  
            usedMem1 = usedMemory ();  
        }  
    }  
    private static long usedMemory ()  
    {  
        return s_runtime.totalMemory () - s_runtime.freeMemory ();  
    }  
      
    private static final Runtime s_runtime = Runtime.getRuntime ();  
} 